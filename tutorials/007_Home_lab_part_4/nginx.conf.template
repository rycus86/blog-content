server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

	location '/.well-known/acme-challenge' {
        root /var/www/challenge;
    }

    location / {
	    return 301 https://$host$request_uri;
    }
}

log_format access_log_format '$remote_addr [$time_local] "$request" $status '
                             '"host: $host" "size: $body_bytes_sent" '
                             '"referrer: $http_referer" "user-agent: $http_user_agent"';

{% for virtual_host, same_host_services in services|groupby('labels.routing-host') %}
    {% if not virtual_host %} {% continue %} {% endif %}

    {% for context_path, matching_services in same_host_services|groupby('labels.routing-context')
           if matching_services|map(attribute='labels.routing-port') %}

        {% set server_name = '%s__%s'|format(virtual_host, context_path)|replace('/', '_') %}


upstream {{ server_name }} {

            {% for service in matching_services if service.labels['routing-port'] %}

            # service: {{ service.name }}

                {% for task in service.tasks.with_status('running')
                    if task.networks.matching('web').first_value.ip_addresses.first_value %}

                # {{ task.name }}
                server {{ task.networks.matching('web').first_value.ip_addresses.first_value }}:{{ service.labels['routing-port'] }};

                {% endfor %}
	    {% endfor %}

}

    {% else %}
        {% continue %}
    {% endfor %}

server {

    server_name {{ virtual_host }};
    listen 443 ssl http2;

	ssl_certificate /etc/letsencrypt/live/{{ virtual_host }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ virtual_host }}/privkey.pem;

	gzip_types text/plain text/css text/xml application/xml application/xml+rss
	           text/javascript application/javascript application/x-javascript application/json
	           image/svg+xml font/otf font/ttf font/woff font/woff2;

	proxy_buffering off;

	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1 access_log_format;

	{% for context_path, matching_services in same_host_services|groupby('labels.routing-context')
	       if matching_services|map(attribute='labels.routing-port') %}

	    {% set first_service = matching_services|first %}
	    {% set internal_context_path = first_service.labels['routing-internal-context']|default('', true) %}
        {% set server_name = '%s__%s'|format(virtual_host, context_path)|replace('/', '_') %}
        {% set max_body_size = first_service.labels['routing-max-body']|default('', true) %}

	location {{ context_path }}/ {

	    {% if first_service.labels['routing-auth'] %}
	        {% set realm = first_service.labels['routing-auth-realm']|default(first_service.name, true) %}
	        auth_basic              "{{ realm }}";
            auth_basic_user_file    {{ first_service.labels['routing-auth'] }};
	    {% endif %}

	    {% if first_service.labels['routing-on-https'] %}
        proxy_pass https://{{ server_name }}{{ internal_context_path }}/;
        {% else %}
        proxy_pass http://{{ server_name }}{{ internal_context_path }}/;
        {% endif %}

		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# HTTP 1.1 support
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		{% if max_body_size != '' %}
		client_max_body_size {{ max_body_size }};
		{% endif %}

		add_header Vary Origin;
	}

    {% endfor %}
}

{% endfor %}
